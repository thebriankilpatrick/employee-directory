{"version":3,"sources":["components/Jumbo.js","utils/API.js","components/Search.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Jumbo","className","axios","get","Search","props","for","type","id","placeholder","onChange","handleInputChange","Users","state","results","filteredResults","searchEmployee","searchText","filter","employee","name","first","last","toLowerCase","includes","event","res","target","value","setState","handleSort","sort","a","b","localeCompare","API","then","data","catch","err","console","log","this","scope","onClick","map","email","cell","dob","format","date","Component","App","Table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+PAaeA,MAXf,WACI,OACI,yBAAKC,UAAU,yCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,kD,iDCLD,EACD,WACN,OAAOC,IAAMC,IAAI,kD,iBCiBVC,MAnBf,SAAgBC,GAEZ,OACI,yBAAKJ,UAAU,yBACX,0BAAMA,UAAU,cACZ,6BACI,2BAAOA,UAAU,UAAUK,IAAI,aAA/B,QACA,yBAAKL,UAAU,eACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBAAf,WAEJ,2BAAOM,KAAK,OAAON,UAAU,eAAeO,GAAG,YAAYC,YAAY,OAAOC,SAAUL,EAAMM,yBC2DvGC,E,4MAlEXC,MAAQ,CACJC,QAAS,GACTC,gBAAiB,I,EAGrBC,eAAiB,SAACC,GAMd,OALgB,EAAKJ,MAAMC,QACKI,QAAO,SAACC,GAEpC,OADiBA,EAASC,KAAKC,MAAQF,EAASC,KAAKE,MACrCC,cAAcC,SAASP,EAAWM,mB,EAa1DZ,kBAAoB,SAACc,GACjB,IAAMC,EAAM,EAAKV,eAAeS,EAAME,OAAOC,OAC7C,EAAKC,SAAS,CACVd,gBAAiBW,K,EAIzBI,WAAa,WACT,EAAKD,SAAS,EAAKhB,MAAMC,QAAQiB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEZ,KAAKC,MAAMa,cAAcD,EAAEb,KAAKC,Y,kEAhBjE,IAAD,OAChBc,IAAeC,MAAK,SAAAV,GAChB,EAAKG,SAAS,CAAEf,QAASY,EAAIW,KAAKvB,QAASC,gBAAiBW,EAAIW,KAAKvB,aACtEwB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAgBhB,OACI,yBAAKtC,UAAU,aACX,kBAAC,EAAD,CACIU,kBAAmB+B,KAAK/B,oBAE5B,2BAAOV,UAAU,SACb,+BACI,4BACI,wBAAI0C,MAAM,OAAV,QAAqB,uBAAG1C,UAAU,mBAAmBO,GAAG,UAAUoC,QAASF,KAAKZ,cAChF,wBAAIa,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,cAGR,+BACKD,KAAK7B,MAAME,gBAAgB8B,KAAI,YAA+B,IAA7BzB,EAA4B,EAA5BA,KAAM0B,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IACjD,OACI,4BACI,4BAAK5B,EAAKC,MAAQ,IAAMD,EAAKE,MAC7B,4BAAKwB,GACL,4BAAKC,GACL,4BAAI,kBAAC,IAAD,CAAQE,OAAO,cAAcD,EAAIE,kB,GAxDrDC,a,MCYLC,MATf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,kBAACoD,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.f4ad58c7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Jumbo() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid text-center\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Employee Directory</h1>\r\n                <p className=\"lead\">Search through the table of employees below</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbo;","import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n    }\r\n};","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n\r\n    return (\r\n        <div className=\"container text-center\">\r\n            <form className=\"searchForm\">\r\n                <div>\r\n                    <label className=\"sr-only\" for=\"inputName\">Name</label>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\">Search</div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" id=\"inputName\" placeholder=\"Name\" onChange={props.handleInputChange}/>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Search;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Moment from \"react-moment\";\r\nimport Search from \"./Search\";  \r\n\r\nclass Users extends Component {\r\n    state = {\r\n        results: [],\r\n        filteredResults: []\r\n    };\r\n\r\n    searchEmployee = (searchText) => {\r\n        const results = this.state.results;\r\n        const filteredResults = results.filter((employee) => {\r\n            const fullName = employee.name.first + employee.name.last;\r\n            return fullName.toLowerCase().includes(searchText.toLowerCase());\r\n        })\r\n        return filteredResults;\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getUsers().then(res => {\r\n            this.setState({ results: res.data.results, filteredResults: res.data.results })\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    handleInputChange = (event) => {\r\n        const res = this.searchEmployee(event.target.value);\r\n        this.setState({\r\n            filteredResults: res\r\n        })\r\n    };\r\n\r\n    handleSort = () => {\r\n        this.setState(this.state.results.sort((a, b) => a.name.first.localeCompare(b.name.first)));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Search \r\n                    handleInputChange={this.handleInputChange}>\r\n                </Search>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Name <i className=\"fas fa-sort-down\" id=\"sortBtn\" onClick={this.handleSort}></i></th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Phone</th>\r\n                            <th scope=\"col\">Birthday</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.filteredResults.map(({name, email, cell, dob}) => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{name.first + \" \" + name.last}</td>\r\n                                    <td>{email}</td>\r\n                                    <td>{cell}</td>\r\n                                    <td><Moment format=\"MM/DD/YYYY\">{dob.date}</Moment></td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users;","import React from 'react';\n// import logo from './logo.svg';\nimport Jumbo from \"./components/Jumbo\";\n// import Search from \"./components/Search\";\nimport Table from \"./components/Table\";\nimport './App.css';\n// import Search from \"./components/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbo ></Jumbo>\n      <Table ></Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}